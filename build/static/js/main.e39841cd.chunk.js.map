{"version":3,"sources":["components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/service-context/service-context.js","components/hoc/with-service.js","actions/index.js","utils/compose.js","components/spinner/index.js","components/spinner/spinner.js","components/error-indicator/index.js","components/error-indicator/error-indicator.js","components/post-list/post-list.js","components/post-list/index.js","components/pages/home-page.js","components/post-item/post-item.js","components/post-item/index.js","components/pages/post-page.js","components/user-item/user-item.js","components/user-item/index.js","components/pages/user-page.js","components/app/index.js","components/app/app.js","components/error-boundry/index.js","components/error-boundry/error-boundry.js","services/posts-services.js","reducers/post-list.js","reducers/user-list.js","reducers/comment-list.js","reducers/index.js","store.js","index.js"],"names":["PostListItem","post","title","userId","id","className","to","React","createContext","ServiceProvider","Provider","ServiceConsumer","Consumer","withService","Wrapped","props","postsService","fetchPosts","dispatch","type","getPosts","then","data","payload","catch","err","fetchUsers","getUsers","fetchComments","getComments","compose","funcs","comp","reduceRight","wrapped","f","Spinner","ErrorIndicator","PostList","posts","map","key","PostListContainer","this","loading","error","Component","connect","postList","HomePage","PostItem","comments","itemId","body","Number","comment","postId","name","email","PostItemContainer","commentList","PostPage","UserItem","users","user","username","address","phone","website","scope","city","street","suite","zipcode","UserItemContainer","userList","UserPage","App","path","component","exact","render","match","params","ErrorBoundry","state","hasError","setState","children","PostsService","_apiBase","url","fetch","res","ok","Error","status","json","getResource","updatePostList","action","undefined","updateUserList","updateCommentList","reducer","store","createStore","ReactDOM","value","document","getElementById"],"mappings":"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","file":"static/js/main.e39841cd.chunk.js","sourcesContent":["import PostListItem from './post-list-item';\n\nexport default PostListItem;\n","import React, { Fragment } from 'react';\nimport './post-list-item.css';\n\nimport { Link } from 'react-router-dom';\n\nconst PostListItem = ({ post }) => {\n  const { title, userId, id } = post;\n  return (\n    <Fragment>\n      <h4>{title}</h4>\n        <p className=\"btn btn-secondary\"><Link to={`/post-page/${id}`}>Read more</Link></p>\n        <p className=\"btn btn-warning\"><Link to={`/user-page/${userId}`}>User link</Link></p>\n    </Fragment>\n  );\n};\n\nexport default PostListItem;\n","import React from 'react';\n\nconst {\n  Provider: ServiceProvider,\n  Consumer: ServiceConsumer\n} = React.createContext();\n\nexport {\n  ServiceProvider,\n  ServiceConsumer\n};\n","import React from 'react';\nimport { ServiceConsumer } from '../service-context';\n\nconst withService = () => (Wrapped) => {\n\n  return (props) => {\n    return (\n      <ServiceConsumer>\n        {\n          (postsService) => {\n            return (<Wrapped {...props}\n                     postsService={postsService}/>);\n          }\n        }\n      </ServiceConsumer>\n    );\n  }\n};\n\nexport default withService;\n","\nconst postsRequested = () => {\n    return {\n        type: 'FETCH_POSTS_REQUEST'\n    }\n};\n\nconst postsLoaded = (newPosts) => {\n    return {\n        type: 'FETCH_POSTS_SUCCESS',\n        payload: newPosts\n    };\n};\n\nconst postsError = (error) => {\n    return {\n        type: 'FETCH_USERS_FAILURE',\n        payload: error\n    };\n};\n\nconst usersRequested = () => {\n    return {\n        type: 'FETCH_USERS_REQUEST'\n    }\n};\n\nconst usersLoaded = (newUsers) => {\n    return {\n        type: 'FETCH_USERS_SUCCESS',\n        payload: newUsers\n    };\n};\n\nconst usersError = (error) => {\n    return {\n        type: 'FETCH_USERS_FAILURE',\n        payload: error\n    };\n};\n\nconst commentsRequested = () => {\n    return {\n        type: 'FETCH_COMMENTS_REQUEST'\n    }\n};\n\nconst commentsLoaded = (newComments) => {\n    return {\n        type: 'FETCH_COMMENTS_SUCCESS',\n        payload: newComments\n    };\n};\n\nconst commentsError = (error) => {\n    return {\n        type: 'FETCH_COMMENTS_FAILURE',\n        payload: error\n    };\n};\n\n\n\n\nconst fetchPosts = (postsService, dispatch) => () => {\n    dispatch(postsRequested());\n    postsService.getPosts()\n        .then((data) => dispatch(postsLoaded(data)))\n        .catch((err) => dispatch(postsError(err)));\n};\n\nconst fetchUsers = (postsService, dispatch) => () => {\n    dispatch(usersRequested());\n    postsService.getUsers()\n        .then((data) => dispatch(usersLoaded(data)))\n        .catch((err) => dispatch(usersError(err)));\n};\n\nconst fetchComments = (postsService, dispatch) => () => {\n    dispatch(commentsRequested());\n    postsService.getComments()\n        .then((data) => dispatch(commentsLoaded(data)))\n        .catch((err) => dispatch(commentsError(err)));\n};\n\nexport {\n    fetchPosts, fetchUsers, fetchComments\n};\n","const compose = (...funcs) => (comp) => {\n  return funcs.reduceRight(\n    (wrapped, f) => f(wrapped), comp);\n};\n\nexport default compose;\n","import Spinner from './spinner';\n\nexport default Spinner;\n","import React from 'react';\nimport './spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className=\"lds-css\">\n            <div className=\"lds-double-ring\">\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    );\n};\n\nexport default Spinner;\n","import ErrorIndicator from './error-indicator';\n\nexport default ErrorIndicator;\n","import React from 'react';\nimport './error-indicator.css';\n\nconst ErrorIndicator = () => {\n  return <div>Error!</div>;\n};\n\nexport default ErrorIndicator;\n","import React, { Component } from 'react';\nimport PostListItem from '../post-list-item';\n\nimport { connect } from 'react-redux';\n\nimport { withService } from '../hoc';\nimport { fetchPosts } from '../../actions';\nimport { compose } from '../../utils';\n\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nimport './post-list.css';\n\nconst PostList = ({ posts }) => {\n    return (\n        <ul className=\"post-list\">\n            {\n                posts.map((post) => {\n                    return (\n                        <li className=\"list-group-item list-group-item-action\" key={post.id}>\n                            <PostListItem\n                                post={post}/>\n                        </li>\n                    );\n                })\n            }\n        </ul>\n    );\n};\n\nclass PostListContainer extends Component {\n\n    componentDidMount() {\n        this.props.fetchPosts();\n    }\n\n    render() {\n        const { posts, loading, error } = this.props;\n\n\n        if (loading) {\n            return <Spinner />;\n        }\n\n        if (error) {\n            return <ErrorIndicator />;\n        }\n        return <PostList posts={posts}/>;\n    }\n}\n\nconst mapStateToProps = ({ postList: { posts, loading, error }}) => {\n    return { posts, loading, error };\n};\n\nconst mapDispatchToProps = (dispatch, { postsService }) => {\n\n    return {\n        fetchPosts: fetchPosts(postsService, dispatch)\n    };\n};\n\nexport default compose(\n    withService(),\n    connect(mapStateToProps, mapDispatchToProps)\n)(PostListContainer);\n","import PostList from './post-list';\n\nexport default PostList;\n","import React from 'react';\nimport PostList from '../post-list';\n\nconst HomePage = () => {\n  return (\n    <PostList />\n  );\n};\n\nexport default HomePage;\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { withService } from '../hoc';\r\nimport { fetchPosts, fetchComments } from '../../actions';\r\nimport { compose } from '../../utils';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nimport './post-item.css';\r\n\r\nconst PostItem = ({ posts, comments, itemId }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                posts.map((post) => {\r\n                    const { title, id, body} = post;\r\n\r\n                    if (id === Number(itemId)) {\r\n                        return (\r\n                            <div key={post.id} className=\"card text-white bg-primary mb-3\">\r\n                                <h2 className=\"card-header\">{title}</h2>\r\n                                <div className=\"card-body\">\r\n                                    <p className=\"card-text\">{body}</p>\r\n                                </div>\r\n                                {\r\n                                    comments.map((comment) => {\r\n                                        const { postId, name, body, email} = comment;\r\n\r\n                                        if (id === Number(postId)) {\r\n                                            return (\r\n                                                <div key={comment.id} className=\"card text-white bg-secondary mb-3\">\r\n                                                    <p className=\"card-header\">{email}</p>\r\n                                                    <div className=\"card-body\">\r\n                                                        <p className=\"card-title\">{name}</p>\r\n                                                        <p className=\"card-text\">{body}</p>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        } else return null\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    } else return null\r\n                })\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nclass PostItemContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n        this.props.fetchComments();\r\n    }\r\n\r\n    render() {\r\n        const { posts, loading, error, comments } = this.props;\r\n\r\n\r\n        if (loading) {\r\n            return <Spinner />;\r\n        }\r\n\r\n        if (error) {\r\n            return <ErrorIndicator />;\r\n        }\r\n        return <PostItem posts={posts} comments={comments} itemId={this.props.itemId}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ postList: { posts }, commentList: { comments, loading, error }}) => {\r\n    return { posts, loading, error, comments };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, { postsService }) => {\r\n\r\n    return {\r\n        fetchPosts: fetchPosts(postsService, dispatch),\r\n        fetchComments: fetchComments(postsService, dispatch)\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    withService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(PostItemContainer);\r\n","import PostItem from './post-item';\r\n\r\nexport default PostItem;","import React, {Fragment} from 'react';\r\nimport PostItem from \"../post-item\";\r\n\r\n\r\nconst PostPage = ({itemId}) => {\r\n    return (\r\n        <Fragment>\r\n            <PostItem itemId={itemId}/>\r\n        </Fragment>\r\n\r\n    );\r\n};\r\n\r\nexport default PostPage;","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { withService } from '../hoc';\r\nimport { fetchUsers } from '../../actions';\r\nimport { compose } from '../../utils';\r\n\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nimport './user-item.css';\r\n\r\nconst UserItem = ({ users, userId }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                users.map((user) => {\r\n                    const { name, id, username, address, phone, website} = user;\r\n                    if (id === Number(userId)) {\r\n                        return (\r\n                            <div key={user.id}>\r\n                                <table className=\"table table-hover\">\r\n                                    <tbody>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Name</th>\r\n                                        <td>{name}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Username</th>\r\n                                        <td>{username}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Phone</th>\r\n                                        <td>{phone}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Website</th>\r\n                                        <td>{website}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">City</th>\r\n                                        <td>{address.city}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Street</th>\r\n                                        <td>{address.street}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Suite</th>\r\n                                        <td>{address.suite}</td>\r\n                                    </tr>\r\n                                    <tr className=\"table-primary\">\r\n                                        <th scope=\"row\">Zipcode</th>\r\n                                        <td>{address.zipcode}</td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        );\r\n                    } else return null\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nclass UserItemContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUsers();\r\n    }\r\n\r\n    render() {\r\n        const { users, loading, error } = this.props;\r\n\r\n\r\n        if (loading) {\r\n            return <Spinner />;\r\n        }\r\n\r\n        if (error) {\r\n            return <ErrorIndicator />;\r\n        }\r\n        return <UserItem users={users} userId={this.props.userId}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ userList: { users, loading, error }}) => {\r\n    return { users, loading, error };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, { postsService }) => {\r\n\r\n    return {\r\n        fetchUsers: fetchUsers(postsService, dispatch)\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    withService(),\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(UserItemContainer);\r\n","import UserItem from './user-item';\r\n\r\nexport default UserItem;","import React, {Fragment} from 'react';\nimport UserItem from \"../user-item\";\n\n\nconst UserPage = ({userId}) => {\n    return (\n        <Fragment>\n            <UserItem userId={userId}/>\n        </Fragment>\n\n    );\n};\n\nexport default UserPage;","import App from './app';\r\n\r\nexport default App;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { HomePage, PostPage, UserPage } from '../pages';\r\n\r\nimport './app.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <Switch>\r\n            <Route\r\n                path=\"/\"\r\n                component={HomePage}\r\n                exact />\r\n\r\n            <Route\r\n                path='/post-page/:id'\r\n                render={({match})=> {\r\n                    const { id } = match.params;\r\n                    return <PostPage itemId={id} />\r\n                }}\r\n            />\r\n\r\n            <Route\r\n                path='/user-page/:id'\r\n                render={({match})=> {\r\n                    const { id } = match.params;\r\n                    return <UserPage userId={id} />\r\n                }}\r\n            />\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default App;","import ErrorBoundry from './error-boundry';\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport ErrorIndicator from '../error-indicator';\n\nexport default class ErrorBoundry extends Component {\n\n  state = {\n    hasError: false\n  };\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <ErrorIndicator />;\n    }\n\n    return this.props.children;\n  }\n}","export default class PostsService {\r\n\r\n    _apiBase = 'https://jsonplaceholder.typicode.com';\r\n\r\n    async getResource(url) {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` +\r\n                `, received ${res.status}`)\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    async getPosts() {\r\n        const res = await this.getResource(`/posts/`);\r\n        return res;\r\n    }\r\n\r\n    async getUsers() {\r\n        const res = await this.getResource(`/users/`);\r\n        return res;\r\n    }\r\n\r\n    async getComments() {\r\n        const res = await this.getResource(`/posts/{postId}/comments/`);\r\n        return res;\r\n    }\r\n\r\n\r\n}","const updatePostList = (state, action) => {\n\n  if (state === undefined) {\n    return {\n      posts: [],\n      loading: true,\n      error: null\n    };\n  }\n\n  switch (action.type) {\n    case 'FETCH_POSTS_REQUEST':\n      return {\n        posts: [],\n        loading: true,\n        error: null\n      };\n\n    case 'FETCH_POSTS_SUCCESS':\n      return {\n        posts: action.payload,\n        loading: false,\n        error: null\n      };\n\n    case 'FETCH_POSTS_FAILURE':\n      return {\n        posts: [],\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state.postList;\n  }\n};\n\nexport default updatePostList;\n","const updateUserList = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            users: [],\r\n            loading: true,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'FETCH_USERS_REQUEST':\r\n            return {\r\n                users: [],\r\n                loading: true,\r\n                error: null\r\n            };\r\n\r\n        case 'FETCH_USERS_SUCCESS':\r\n            return {\r\n                users: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n\r\n        case 'FETCH_USERS_FAILURE':\r\n            return {\r\n                users: [],\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n\r\n        default:\r\n            return state.userList;\r\n    }\r\n};\r\n\r\nexport default updateUserList;\r\n","const updateCommentList = (state, action) => {\r\n\r\n    if (state === undefined) {\r\n        return {\r\n            comments: [],\r\n            loading: true,\r\n            error: null\r\n        };\r\n    }\r\n\r\n    switch (action.type) {\r\n        case 'FETCH_COMMENTS_REQUEST':\r\n            return {\r\n                comments: [],\r\n                loading: true,\r\n                error: null\r\n            };\r\n\r\n        case 'FETCH_COMMENTS_SUCCESS':\r\n            return {\r\n                comments: action.payload,\r\n                loading: false,\r\n                error: null\r\n            };\r\n\r\n        case 'FETCH_COMMENTS_FAILURE':\r\n            return {\r\n                comments: [],\r\n                loading: false,\r\n                error: action.payload\r\n            };\r\n\r\n        default:\r\n            return state.commentList;\r\n    }\r\n};\r\n\r\nexport default updateCommentList;\r\n","import updatePostList from './post-list';\nimport updateUserList from './user-list';\nimport updateCommentList from './comment-list';\n\nconst reducer = (state, action) => {\n    return {\n        postList: updatePostList(state, action),\n        commentList: updateCommentList(state, action),\n        userList: updateUserList(state, action)\n    };\n};\n\n\nexport default reducer;\n","import { createStore } from 'redux';\n\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './components/app';\nimport ErrorBoundry from './components/error-boundry';\nimport PostsService from './services/posts-services';\nimport { ServiceProvider } from './components/service-context';\n\nimport store from './store';\n\nconst postsService = new PostsService();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ErrorBoundry>\n      <ServiceProvider value={postsService}>\n        <Router>\n          <App />\n        </Router>\n      </ServiceProvider>\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}